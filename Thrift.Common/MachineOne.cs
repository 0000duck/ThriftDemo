/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftInterface
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class MachineOne : TBase
    {
        private string _Name;
        private string _Id;
        private string _IpAddress;
        private int _RunState;
        private int _AlarmState;
        private double _Temp;
        private double _Press;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                __isset.Name = true;
                this._Name = value;
            }
        }

        public string Id
        {
            get
            {
                return _Id;
            }
            set
            {
                __isset.Id = true;
                this._Id = value;
            }
        }

        public string IpAddress
        {
            get
            {
                return _IpAddress;
            }
            set
            {
                __isset.IpAddress = true;
                this._IpAddress = value;
            }
        }

        public int RunState
        {
            get
            {
                return _RunState;
            }
            set
            {
                __isset.RunState = true;
                this._RunState = value;
            }
        }

        public int AlarmState
        {
            get
            {
                return _AlarmState;
            }
            set
            {
                __isset.AlarmState = true;
                this._AlarmState = value;
            }
        }

        public double Temp
        {
            get
            {
                return _Temp;
            }
            set
            {
                __isset.Temp = true;
                this._Temp = value;
            }
        }

        public double Press
        {
            get
            {
                return _Press;
            }
            set
            {
                __isset.Press = true;
                this._Press = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool Name;
            public bool Id;
            public bool IpAddress;
            public bool RunState;
            public bool AlarmState;
            public bool Temp;
            public bool Press;
        }

        public MachineOne()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String)
                        {
                            Id = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.String)
                        {
                            IpAddress = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == TType.I32)
                        {
                            RunState = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == TType.I32)
                        {
                            AlarmState = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == TType.Double)
                        {
                            Temp = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == TType.Double)
                        {
                            Press = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("MachineOne");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Name != null && __isset.Name)
            {
                field.Name = "Name";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            if (Id != null && __isset.Id)
            {
                field.Name = "Id";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Id);
                oprot.WriteFieldEnd();
            }
            if (IpAddress != null && __isset.IpAddress)
            {
                field.Name = "IpAddress";
                field.Type = TType.String;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(IpAddress);
                oprot.WriteFieldEnd();
            }
            if (__isset.RunState)
            {
                field.Name = "RunState";
                field.Type = TType.I32;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(RunState);
                oprot.WriteFieldEnd();
            }
            if (__isset.AlarmState)
            {
                field.Name = "AlarmState";
                field.Type = TType.I32;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(AlarmState);
                oprot.WriteFieldEnd();
            }
            if (__isset.Temp)
            {
                field.Name = "Temp";
                field.Type = TType.Double;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Temp);
                oprot.WriteFieldEnd();
            }
            if (__isset.Press)
            {
                field.Name = "Press";
                field.Type = TType.Double;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Press);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("MachineOne(");
            sb.Append("Name: ");
            sb.Append(Name);
            sb.Append(",Id: ");
            sb.Append(Id);
            sb.Append(",IpAddress: ");
            sb.Append(IpAddress);
            sb.Append(",RunState: ");
            sb.Append(RunState);
            sb.Append(",AlarmState: ");
            sb.Append(AlarmState);
            sb.Append(",Temp: ");
            sb.Append(Temp);
            sb.Append(",Press: ");
            sb.Append(Press);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
