/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftInterface
{
    public partial class PublicService
    {
        public interface Iface
        {
            List<MachineOne> GetAllMachineOnes();
#if SILVERLIGHT
      IAsyncResult Begin_GetAllMachineOnes(AsyncCallback callback, object state);
      List<MachineOne> End_GetAllMachineOnes(IAsyncResult asyncResult);
#endif
            MachineOne GetMachineOne(string machineId);
#if SILVERLIGHT
      IAsyncResult Begin_GetMachineOne(AsyncCallback callback, object state, string machineId);
      MachineOne End_GetMachineOne(IAsyncResult asyncResult);
#endif
            int GetRunningCount();
#if SILVERLIGHT
      IAsyncResult Begin_GetRunningCount(AsyncCallback callback, object state);
      int End_GetRunningCount(IAsyncResult asyncResult);
#endif
            int GetAlarmCount();
#if SILVERLIGHT
      IAsyncResult Begin_GetAlarmCount(AsyncCallback callback, object state);
      int End_GetAlarmCount(IAsyncResult asyncResult);
#endif
            string GetJsonMachineState();
#if SILVERLIGHT
      IAsyncResult Begin_GetJsonMachineState(AsyncCallback callback, object state);
      string End_GetJsonMachineState(IAsyncResult asyncResult);
#endif
            string GetJsonMachineAlarm();
#if SILVERLIGHT
      IAsyncResult Begin_GetJsonMachineAlarm(AsyncCallback callback, object state);
      string End_GetJsonMachineAlarm(IAsyncResult asyncResult);
#endif
            string GetJsonMachineTemp();
#if SILVERLIGHT
      IAsyncResult Begin_GetJsonMachineTemp(AsyncCallback callback, object state);
      string End_GetJsonMachineTemp(IAsyncResult asyncResult);
#endif
            string GetJsonMachinePress();
#if SILVERLIGHT
      IAsyncResult Begin_GetJsonMachinePress(AsyncCallback callback, object state);
      string End_GetJsonMachinePress(IAsyncResult asyncResult);
#endif
            bool SetMachineRunState(string machineId, int state);
#if SILVERLIGHT
      IAsyncResult Begin_SetMachineRunState(AsyncCallback callback, object state, string machineId, int state);
      bool End_SetMachineRunState(IAsyncResult asyncResult);
#endif
        }

        public class Client : IDisposable, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }


            #region " IDisposable Support "
            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }


            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed)
                {
                    if (disposing)
                    {
                        if (iprot_ != null)
                        {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null)
                        {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }
            #endregion



#if SILVERLIGHT
      public IAsyncResult Begin_GetAllMachineOnes(AsyncCallback callback, object state)
      {
        return send_GetAllMachineOnes(callback, state);
      }

      public List<MachineOne> End_GetAllMachineOnes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllMachineOnes();
      }

#endif

            public List<MachineOne> GetAllMachineOnes()
            {
#if !SILVERLIGHT
                send_GetAllMachineOnes();
                return recv_GetAllMachineOnes();

#else
        var asyncResult = Begin_GetAllMachineOnes(null, null);
        return End_GetAllMachineOnes(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetAllMachineOnes(AsyncCallback callback, object state)
#else
            public void send_GetAllMachineOnes()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetAllMachineOnes", TMessageType.Call, seqid_));
                GetAllMachineOnes_args args = new GetAllMachineOnes_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<MachineOne> recv_GetAllMachineOnes()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetAllMachineOnes_result result = new GetAllMachineOnes_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllMachineOnes failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetMachineOne(AsyncCallback callback, object state, string machineId)
      {
        return send_GetMachineOne(callback, state, machineId);
      }

      public MachineOne End_GetMachineOne(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMachineOne();
      }

#endif

            public MachineOne GetMachineOne(string machineId)
            {
#if !SILVERLIGHT
                send_GetMachineOne(machineId);
                return recv_GetMachineOne();

#else
        var asyncResult = Begin_GetMachineOne(null, null, machineId);
        return End_GetMachineOne(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetMachineOne(AsyncCallback callback, object state, string machineId)
#else
            public void send_GetMachineOne(string machineId)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetMachineOne", TMessageType.Call, seqid_));
                GetMachineOne_args args = new GetMachineOne_args();
                args.MachineId = machineId;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public MachineOne recv_GetMachineOne()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetMachineOne_result result = new GetMachineOne_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMachineOne failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetRunningCount(AsyncCallback callback, object state)
      {
        return send_GetRunningCount(callback, state);
      }

      public int End_GetRunningCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRunningCount();
      }

#endif

            public int GetRunningCount()
            {
#if !SILVERLIGHT
                send_GetRunningCount();
                return recv_GetRunningCount();

#else
        var asyncResult = Begin_GetRunningCount(null, null);
        return End_GetRunningCount(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetRunningCount(AsyncCallback callback, object state)
#else
            public void send_GetRunningCount()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetRunningCount", TMessageType.Call, seqid_));
                GetRunningCount_args args = new GetRunningCount_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public int recv_GetRunningCount()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetRunningCount_result result = new GetRunningCount_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRunningCount failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetAlarmCount(AsyncCallback callback, object state)
      {
        return send_GetAlarmCount(callback, state);
      }

      public int End_GetAlarmCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAlarmCount();
      }

#endif

            public int GetAlarmCount()
            {
#if !SILVERLIGHT
                send_GetAlarmCount();
                return recv_GetAlarmCount();

#else
        var asyncResult = Begin_GetAlarmCount(null, null);
        return End_GetAlarmCount(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetAlarmCount(AsyncCallback callback, object state)
#else
            public void send_GetAlarmCount()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetAlarmCount", TMessageType.Call, seqid_));
                GetAlarmCount_args args = new GetAlarmCount_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public int recv_GetAlarmCount()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetAlarmCount_result result = new GetAlarmCount_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAlarmCount failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetJsonMachineState(AsyncCallback callback, object state)
      {
        return send_GetJsonMachineState(callback, state);
      }

      public string End_GetJsonMachineState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetJsonMachineState();
      }

#endif

            public string GetJsonMachineState()
            {
#if !SILVERLIGHT
                send_GetJsonMachineState();
                return recv_GetJsonMachineState();

#else
        var asyncResult = Begin_GetJsonMachineState(null, null);
        return End_GetJsonMachineState(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetJsonMachineState(AsyncCallback callback, object state)
#else
            public void send_GetJsonMachineState()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetJsonMachineState", TMessageType.Call, seqid_));
                GetJsonMachineState_args args = new GetJsonMachineState_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_GetJsonMachineState()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetJsonMachineState_result result = new GetJsonMachineState_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetJsonMachineState failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetJsonMachineAlarm(AsyncCallback callback, object state)
      {
        return send_GetJsonMachineAlarm(callback, state);
      }

      public string End_GetJsonMachineAlarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetJsonMachineAlarm();
      }

#endif

            public string GetJsonMachineAlarm()
            {
#if !SILVERLIGHT
                send_GetJsonMachineAlarm();
                return recv_GetJsonMachineAlarm();

#else
        var asyncResult = Begin_GetJsonMachineAlarm(null, null);
        return End_GetJsonMachineAlarm(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetJsonMachineAlarm(AsyncCallback callback, object state)
#else
            public void send_GetJsonMachineAlarm()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetJsonMachineAlarm", TMessageType.Call, seqid_));
                GetJsonMachineAlarm_args args = new GetJsonMachineAlarm_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_GetJsonMachineAlarm()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetJsonMachineAlarm_result result = new GetJsonMachineAlarm_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetJsonMachineAlarm failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetJsonMachineTemp(AsyncCallback callback, object state)
      {
        return send_GetJsonMachineTemp(callback, state);
      }

      public string End_GetJsonMachineTemp(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetJsonMachineTemp();
      }

#endif

            public string GetJsonMachineTemp()
            {
#if !SILVERLIGHT
                send_GetJsonMachineTemp();
                return recv_GetJsonMachineTemp();

#else
        var asyncResult = Begin_GetJsonMachineTemp(null, null);
        return End_GetJsonMachineTemp(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetJsonMachineTemp(AsyncCallback callback, object state)
#else
            public void send_GetJsonMachineTemp()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetJsonMachineTemp", TMessageType.Call, seqid_));
                GetJsonMachineTemp_args args = new GetJsonMachineTemp_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_GetJsonMachineTemp()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetJsonMachineTemp_result result = new GetJsonMachineTemp_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetJsonMachineTemp failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_GetJsonMachinePress(AsyncCallback callback, object state)
      {
        return send_GetJsonMachinePress(callback, state);
      }

      public string End_GetJsonMachinePress(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetJsonMachinePress();
      }

#endif

            public string GetJsonMachinePress()
            {
#if !SILVERLIGHT
                send_GetJsonMachinePress();
                return recv_GetJsonMachinePress();

#else
        var asyncResult = Begin_GetJsonMachinePress(null, null);
        return End_GetJsonMachinePress(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_GetJsonMachinePress(AsyncCallback callback, object state)
#else
            public void send_GetJsonMachinePress()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("GetJsonMachinePress", TMessageType.Call, seqid_));
                GetJsonMachinePress_args args = new GetJsonMachinePress_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_GetJsonMachinePress()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                GetJsonMachinePress_result result = new GetJsonMachinePress_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetJsonMachinePress failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_SetMachineRunState(AsyncCallback callback, object state, string machineId, int state)
      {
        return send_SetMachineRunState(callback, state, machineId, state);
      }

      public bool End_SetMachineRunState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetMachineRunState();
      }

#endif

            public bool SetMachineRunState(string machineId, int state)
            {
#if !SILVERLIGHT
                send_SetMachineRunState(machineId, state);
                return recv_SetMachineRunState();

#else
        var asyncResult = Begin_SetMachineRunState(null, null, machineId, state);
        return End_SetMachineRunState(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_SetMachineRunState(AsyncCallback callback, object state, string machineId, int state)
#else
            public void send_SetMachineRunState(string machineId, int state)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("SetMachineRunState", TMessageType.Call, seqid_));
                SetMachineRunState_args args = new SetMachineRunState_args();
                args.MachineId = machineId;
                args.State = state;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public bool recv_SetMachineRunState()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                SetMachineRunState_result result = new SetMachineRunState_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetMachineRunState failed: unknown result");
            }

        }
        public class Processor : TProcessor
        {
            public Processor(Iface iface)
            {
                iface_ = iface;
                processMap_["GetAllMachineOnes"] = GetAllMachineOnes_Process;
                processMap_["GetMachineOne"] = GetMachineOne_Process;
                processMap_["GetRunningCount"] = GetRunningCount_Process;
                processMap_["GetAlarmCount"] = GetAlarmCount_Process;
                processMap_["GetJsonMachineState"] = GetJsonMachineState_Process;
                processMap_["GetJsonMachineAlarm"] = GetJsonMachineAlarm_Process;
                processMap_["GetJsonMachineTemp"] = GetJsonMachineTemp_Process;
                processMap_["GetJsonMachinePress"] = GetJsonMachinePress_Process;
                processMap_["SetMachineRunState"] = SetMachineRunState_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private Iface iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void GetAllMachineOnes_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetAllMachineOnes_args args = new GetAllMachineOnes_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetAllMachineOnes_result result = new GetAllMachineOnes_result();
                result.Success = iface_.GetAllMachineOnes();
                oprot.WriteMessageBegin(new TMessage("GetAllMachineOnes", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetMachineOne_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetMachineOne_args args = new GetMachineOne_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetMachineOne_result result = new GetMachineOne_result();
                result.Success = iface_.GetMachineOne(args.MachineId);
                oprot.WriteMessageBegin(new TMessage("GetMachineOne", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetRunningCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetRunningCount_args args = new GetRunningCount_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetRunningCount_result result = new GetRunningCount_result();
                result.Success = iface_.GetRunningCount();
                oprot.WriteMessageBegin(new TMessage("GetRunningCount", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetAlarmCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetAlarmCount_args args = new GetAlarmCount_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetAlarmCount_result result = new GetAlarmCount_result();
                result.Success = iface_.GetAlarmCount();
                oprot.WriteMessageBegin(new TMessage("GetAlarmCount", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetJsonMachineState_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetJsonMachineState_args args = new GetJsonMachineState_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetJsonMachineState_result result = new GetJsonMachineState_result();
                result.Success = iface_.GetJsonMachineState();
                oprot.WriteMessageBegin(new TMessage("GetJsonMachineState", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetJsonMachineAlarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetJsonMachineAlarm_args args = new GetJsonMachineAlarm_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetJsonMachineAlarm_result result = new GetJsonMachineAlarm_result();
                result.Success = iface_.GetJsonMachineAlarm();
                oprot.WriteMessageBegin(new TMessage("GetJsonMachineAlarm", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetJsonMachineTemp_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetJsonMachineTemp_args args = new GetJsonMachineTemp_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetJsonMachineTemp_result result = new GetJsonMachineTemp_result();
                result.Success = iface_.GetJsonMachineTemp();
                oprot.WriteMessageBegin(new TMessage("GetJsonMachineTemp", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void GetJsonMachinePress_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                GetJsonMachinePress_args args = new GetJsonMachinePress_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                GetJsonMachinePress_result result = new GetJsonMachinePress_result();
                result.Success = iface_.GetJsonMachinePress();
                oprot.WriteMessageBegin(new TMessage("GetJsonMachinePress", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void SetMachineRunState_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                SetMachineRunState_args args = new SetMachineRunState_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                SetMachineRunState_result result = new SetMachineRunState_result();
                result.Success = iface_.SetMachineRunState(args.MachineId, args.State);
                oprot.WriteMessageBegin(new TMessage("SetMachineRunState", TMessageType.Reply, seqid));
                result.Write(oprot);
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetAllMachineOnes_args : TBase
        {

            public GetAllMachineOnes_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetAllMachineOnes_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetAllMachineOnes_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetAllMachineOnes_result : TBase
        {
            private List<MachineOne> _success;

            public List<MachineOne> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetAllMachineOnes_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.List)
                            {
                                {
                                    Success = new List<MachineOne>();
                                    TList _list0 = iprot.ReadListBegin();
                                    for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                    {
                                        MachineOne _elem2 = new MachineOne();
                                        _elem2 = new MachineOne();
                                        _elem2.Read(iprot);
                                        Success.Add(_elem2);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetAllMachineOnes_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.List;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        {
                            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                            foreach (MachineOne _iter3 in Success)
                            {
                                _iter3.Write(oprot);
                            }
                            oprot.WriteListEnd();
                        }
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetAllMachineOnes_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetMachineOne_args : TBase
        {
            private string _machineId;

            public string MachineId
            {
                get
                {
                    return _machineId;
                }
                set
                {
                    __isset.machineId = true;
                    this._machineId = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool machineId;
            }

            public GetMachineOne_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                MachineId = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetMachineOne_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (MachineId != null && __isset.machineId)
                {
                    field.Name = "machineId";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(MachineId);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetMachineOne_args(");
                sb.Append("MachineId: ");
                sb.Append(MachineId);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetMachineOne_result : TBase
        {
            private MachineOne _success;

            public MachineOne Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetMachineOne_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Struct)
                            {
                                Success = new MachineOne();
                                Success.Read(iprot);
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetMachineOne_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.Struct;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        Success.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetMachineOne_result(");
                sb.Append("Success: ");
                sb.Append(Success == null ? "<null>" : Success.ToString());
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetRunningCount_args : TBase
        {

            public GetRunningCount_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetRunningCount_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetRunningCount_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetRunningCount_result : TBase
        {
            private int _success;

            public int Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetRunningCount_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetRunningCount_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetRunningCount_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetAlarmCount_args : TBase
        {

            public GetAlarmCount_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetAlarmCount_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetAlarmCount_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetAlarmCount_result : TBase
        {
            private int _success;

            public int Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetAlarmCount_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.I32)
                            {
                                Success = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetAlarmCount_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.I32;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetAlarmCount_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachineState_args : TBase
        {

            public GetJsonMachineState_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachineState_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachineState_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachineState_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetJsonMachineState_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachineState_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachineState_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachineAlarm_args : TBase
        {

            public GetJsonMachineAlarm_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachineAlarm_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachineAlarm_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachineAlarm_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetJsonMachineAlarm_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachineAlarm_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachineAlarm_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachineTemp_args : TBase
        {

            public GetJsonMachineTemp_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachineTemp_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachineTemp_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachineTemp_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetJsonMachineTemp_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachineTemp_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachineTemp_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachinePress_args : TBase
        {

            public GetJsonMachinePress_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachinePress_args");
                oprot.WriteStructBegin(struc);
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachinePress_args(");
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class GetJsonMachinePress_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public GetJsonMachinePress_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.String)
                            {
                                Success = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("GetJsonMachinePress_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    if (Success != null)
                    {
                        field.Name = "Success";
                        field.Type = TType.String;
                        field.ID = 0;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Success);
                        oprot.WriteFieldEnd();
                    }
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("GetJsonMachinePress_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class SetMachineRunState_args : TBase
        {
            private string _machineId;
            private int _state;

            public string MachineId
            {
                get
                {
                    return _machineId;
                }
                set
                {
                    __isset.machineId = true;
                    this._machineId = value;
                }
            }

            public int State
            {
                get
                {
                    return _state;
                }
                set
                {
                    __isset.state = true;
                    this._state = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool machineId;
                public bool state;
            }

            public SetMachineRunState_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                MachineId = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.I32)
                            {
                                State = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("SetMachineRunState_args");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (MachineId != null && __isset.machineId)
                {
                    field.Name = "machineId";
                    field.Type = TType.String;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(MachineId);
                    oprot.WriteFieldEnd();
                }
                if (__isset.state)
                {
                    field.Name = "state";
                    field.Type = TType.I32;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(State);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("SetMachineRunState_args(");
                sb.Append("MachineId: ");
                sb.Append(MachineId);
                sb.Append(",State: ");
                sb.Append(State);
                sb.Append(")");
                return sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class SetMachineRunState_result : TBase
        {
            private bool _success;

            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public SetMachineRunState_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 0:
                            if (field.Type == TType.Bool)
                            {
                                Success = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }

            public void Write(TProtocol oprot)
            {
                TStruct struc = new TStruct("SetMachineRunState_result");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (this.__isset.success)
                {
                    field.Name = "Success";
                    field.Type = TType.Bool;
                    field.ID = 0;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(Success);
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder("SetMachineRunState_result(");
                sb.Append("Success: ");
                sb.Append(Success);
                sb.Append(")");
                return sb.ToString();
            }

        }

    }
}
